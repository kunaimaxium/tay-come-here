import tflite_runtime.interpreter as tflite
import numpy as np
import cv2
import RPi.GPIO as GPIO
import time

# Load TFLite model
interpreter = tflite.Interpreter(model_path="model.tflite")
interpreter.allocate_tensors()

# Get input and output details
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# Setup camera
cap = cv2.VideoCapture(0)

# Setup GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setup(17, GPIO.OUT)  # Servo 1
GPIO.setup(18, GPIO.OUT)  # Servo 2
servo1 = GPIO.PWM(17, 50)
servo2 = GPIO.PWM(18, 50)
servo1.start(0)
servo2.start(0)

def classify(frame):
    frame = cv2.resize(frame, (224, 224))  # resize to model input size
    input_data = np.expand_dims(frame, axis=0).astype(np.uint8)
    interpreter.set_tensor(input_details[0]['index'], input_data)
    interpreter.invoke()
    output_data = interpreter.get_tensor(output_details[0]['index'])
    return output_data

try:
    while True:
        ret, frame = cap.read()
        if not ret:
            continue
        prediction = classify(frame)
        label_index = np.argmax(prediction)
        print("Prediction:", label_index)

        if label_index == 0:  # Example: 0 = cat
            servo1.ChangeDutyCycle(7)  # Turn servo
            time.sleep(1)
            servo1.ChangeDutyCycle(0)
        elif label_index == 1:  # Example: 1 = dog
            servo2.ChangeDutyCycle(7)
            time.sleep(1)
            servo2.ChangeDutyCycle(0)

        time.sleep(2)

except KeyboardInterrupt:
    pass

cap.release()
servo1.stop()
servo2.stop()
GPIO.cleanup()
