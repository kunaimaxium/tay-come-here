import time
import board
import digitalio
import RPi.GPIO as GPIO
import numpy as np
import cv2
from tflite_runtime.interpreter import Interpreter
from picamera2 import Picamera2

# === Servo setup ===
GPIO.setmode(GPIO.BCM)
servo_cat_pin = 17  # Change if different
servo_dog_pin = 27  # Change if different

GPIO.setup(servo_cat_pin, GPIO.OUT)
GPIO.setup(servo_dog_pin, GPIO.OUT)

servo_cat = GPIO.PWM(servo_cat_pin, 50)  # 50Hz
servo_dog = GPIO.PWM(servo_dog_pin, 50)

servo_cat.start(0)
servo_dog.start(0)

# === Load TFLite model ===
interpreter = Interpreter(model_path="model.tflite")
interpreter.allocate_tensors()

input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# === Load labels ===
with open("labels.txt", "r") as f:
    labels = [line.strip() for line in f.readlines()]

# === Camera setup ===
picam2 = Picamera2()
picam2.preview_configuration.main.size = (224, 224)
picam2.preview_configuration.main.format = "RGB888"
picam2.configure("preview")
picam2.start()
time.sleep(2)

def detect_pet():
    image = picam2.capture_array()
    image = cv2.resize(image, (224, 224))
    input_data = np.expand_dims(image.astype(np.uint8), axis=0)

    interpreter.set_tensor(input_details[0]['index'], input_data)
    interpreter.invoke()

    output_data = interpreter.get_tensor(output_details[0]['index'])[0]
    top_index = np.argmax(output_data)
    label = labels[top_index]
    confidence = output_data[top_index]

    print(f"Detected: {label} ({confidence:.2f})")

    if confidence > 0.7:
        if "cat" in label.lower():
            print("üê± Cat detected! Triggering Servo 1.")
            servo_cat.ChangeDutyCycle(7)
            time.sleep(1)
            servo_cat.ChangeDutyCycle(2.5)
        elif "dog" in label.lower():
            print("üê∂ Dog detected! Triggering Servo 2.")
            servo_dog.ChangeDutyCycle(7)
            time.sleep(1)
            servo_dog.ChangeDutyCycle(2.5)

try:
    while True:
        detect_pet()
        time.sleep(2)

except KeyboardInterrupt:
    print("Exiting...")
    servo_cat.stop()
    servo_dog.stop()
    GPIO.cleanup()
