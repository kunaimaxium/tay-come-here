import time
import cv2
import numpy as np
import RPi.GPIO as GPIO
from tflite_runtime.interpreter import Interpreter

# Load your TFLite model
interpreter = Interpreter(model_path="model.tflite")
interpreter.allocate_tensors()

# Set up servo GPIO pins
servo1_pin = 17
servo2_pin = 27
GPIO.setmode(GPIO.BCM)
GPIO.setup(servo1_pin, GPIO.OUT)
GPIO.setup(servo2_pin, GPIO.OUT)
servo1 = GPIO.PWM(servo1_pin, 50)
servo2 = GPIO.PWM(servo2_pin, 50)
servo1.start(0)
servo2.start(0)

# Set up camera
cap = cv2.VideoCapture(0)

# Get input details for the model
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()
height = input_details[0]['shape'][1]
width = input_details[0]['shape'][2]

# Load labels
with open("labels.txt", "r") as f:
    labels = [line.strip() for line in f.readlines()]

def move_servos():
    print("Pet detected! Moving servos.")
    servo1.ChangeDutyCycle(7.5)
    servo2.ChangeDutyCycle(7.5)
    time.sleep(1)
    servo1.ChangeDutyCycle(2.5)
    servo2.ChangeDutyCycle(2.5)
    time.sleep(1)
    servo1.ChangeDutyCycle(0)
    servo2.ChangeDutyCycle(0)

try:
    while True:
        ret, frame = cap.read()
        if not ret:
            continue

        # Preprocess image
        image = cv2.resize(frame, (width, height))
        input_data = np.expand_dims(image, axis=0).astype(np.uint8)
        interpreter.set_tensor(input_details[0]['index'], input_data)
        interpreter.invoke()

        # Get results
        output_data = interpreter.get_tensor(output_details[0]['index'])[0]
        predicted_index = np.argmax(output_data)
        prediction = labels[predicted_index]

        print("Prediction:", prediction)

        # Trigger on detection
        if prediction.lower() in ["dog", "cat"]:
            move_servos()

        time.sleep(2)

except KeyboardInterrupt:
    print("Exiting...")

finally:
    servo1.stop()
    servo2.stop()
    GPIO.cleanup()
    cap.release()
